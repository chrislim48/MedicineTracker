{"ast":null,"code":"var _jsxFileName = \"/Users/art/Desktop/CSE115a/Medicine-Tracker/frontend/src/components/Calendar.js\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Calendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Calendar\",\n      children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        initialView: \"dayGridMonth\",\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/art/Desktop/CSE115a/Medicine-Tracker/frontend/src/components/Calendar.js"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","Calendar","Component","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","createEventId","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","confirm","event","remove","handleEvents","events","render","left","center","right","renderEventContent","eventInfo","timeText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;;AAEA,eAAe,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAElDC,KAFkD,GAE1C;AACNC,MAAAA,eAAe,EAAE,IADX;AAENC,MAAAA,aAAa,EAAE;AAFT,KAF0C;;AAAA,SA2BlDC,oBA3BkD,GA2B3B,MAAM;AAC3B,WAAKC,QAAL,CAAc;AACZH,QAAAA,eAAe,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADjB,OAAd;AAGD,KA/BiD;;AAAA,SAiClDI,gBAjCkD,GAiC9BC,UAAD,IAAgB;AACjC,UAAIC,KAAK,GAAGC,MAAM,CAAC,yCAAD,CAAlB;AACA,UAAIC,WAAW,GAAGH,UAAU,CAACI,IAAX,CAAgBC,QAAlC;AAEAF,MAAAA,WAAW,CAACG,QAAZ,GAJiC,CAIV;;AAEvB,UAAIL,KAAJ,EAAW;AACTE,QAAAA,WAAW,CAACI,QAAZ,CAAqB;AACnBC,UAAAA,EAAE,EAAEC,aAAa,EADE;AAEnBR,UAAAA,KAFmB;AAGnBS,UAAAA,KAAK,EAAEV,UAAU,CAACW,QAHC;AAInBC,UAAAA,GAAG,EAAEZ,UAAU,CAACa,MAJG;AAKnBC,UAAAA,MAAM,EAAEd,UAAU,CAACc;AALA,SAArB;AAOD;AACF,KAhDiD;;AAAA,SAkDlDC,gBAlDkD,GAkD9BC,SAAD,IAAe;AAChC,UAAIC,OAAO,CAAE,8CAA6CD,SAAS,CAACE,KAAV,CAAgBjB,KAAM,GAArE,CAAX,EAAqF;AACnFe,QAAAA,SAAS,CAACE,KAAV,CAAgBC,MAAhB;AACD;AACF,KAtDiD;;AAAA,SAwDlDC,YAxDkD,GAwDlCC,MAAD,IAAY;AACzB,WAAKvB,QAAL,CAAc;AACZF,QAAAA,aAAa,EAAEyB;AADH,OAAd;AAGD,KA5DiD;AAAA;;AAOlDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACI,QAAC,YAAD;AACE,QAAA,OAAO,EAAE,CAACjC,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CADX;AAEE,QAAA,aAAa,EAAE;AACbgC,UAAAA,IAAI,EAAE,iBADO;AAEbC,UAAAA,MAAM,EAAE,OAFK;AAGbC,UAAAA,KAAK,EAAE;AAHM,SAFjB;AAOE,QAAA,WAAW,EAAC,cAPd;AAQE,QAAA,QAAQ,EAAE,IARZ;AASE,QAAA,UAAU,EAAE,IATd;AAUE,QAAA,YAAY,EAAE,IAVhB;AAWE,QAAA,YAAY,EAAE;AAXhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;;AAzBiD;;AAgEpD,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AACrC,sBACE;AAAA,4BACE;AAAA,gBAAIA,SAAS,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAID,SAAS,CAACT,KAAV,CAAgBjB;AAApB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD","sourcesContent":["import React from 'react'\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\nexport default class Calendar extends React.Component {\n\n    state = {\n      weekendsVisible: true,\n      currentEvents: []\n    }\n  \n    render() {\n      return (\n        <div className='Calendar'>\n            <FullCalendar\n              plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n              headerToolbar={{\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\n              }}\n              initialView='dayGridMonth'\n              editable={true}\n              selectable={true}\n              selectMirror={true}\n              dayMaxEvents={true}\n            />\n        </div>\n      )\n    }\n  \n    handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      })\n    }\n  \n    handleDateSelect = (selectInfo) => {\n      let title = prompt('Please enter a new title for your event')\n      let calendarApi = selectInfo.view.calendar\n  \n      calendarApi.unselect() // clear date selection\n  \n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        })\n      }\n    }\n  \n    handleEventClick = (clickInfo) => {\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove()\n      }\n    }\n  \n    handleEvents = (events) => {\n      this.setState({\n        currentEvents: events\n      })\n    }\n  \n  }\n  \n  function renderEventContent(eventInfo) {\n    return (\n      <>\n        <b>{eventInfo.timeText}</b>\n        <i>{eventInfo.event.title}</i>\n      </>\n    )\n  }\n"]},"metadata":{},"sourceType":"module"}