{"ast":null,"code":"var _jsxFileName = \"/Users/juanlee/Desktop/UCSC Coding/CSE115A/Medicine-Tracker/frontend/src/components/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport Box from '@mui/material/Box';\nimport { WorkspaceContext } from '../App.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calendar() {\n  _s();\n\n  const {\n    weekendsVisibleS,\n    currentEventsS\n  } = React.useContext(WorkspaceContext);\n  const [weekendsVisible] = weekendsVisibleS;\n  const [currentEvents] = currentEventsS; // const [channelObj, setChannelObj] = React.useState({\n  //   id: '',\n  //   name: '',\n  //   events: [],\n  // });\n  // const [channelFeed, setChannelFeed] = React.useState([]);\n  // const [dmDrawerOpen, setdmDrawerOpen] = React.useState(false);\n  // const [dmObj, setDmObj] = React.useState({\n  //   id: '',\n  //   name: '',\n  //   events: [],\n  // });\n  // const [dmFeed, setDmFeed] = React.useState([]);\n  // const handleDateClick = (selectInfo) => {\n  // let title = prompt('Please enter a new title for your event')\n  // let calendarApi = selectInfo.view.calendar\n  // calendarApi.unselect() // clear date selection\n  // if (title) {\n  //   calendarApi.addEvent({\n  //     id: createEventId(),\n  //     title,\n  //     start: selectInfo.startStr,\n  //     end: selectInfo.endStr,\n  //     allDay: selectInfo.allDay\n  //   })\n  // }\n  // }\n  // const handleEventClick = (clickInfo) => {\n  //   if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n  //     clickInfo.event.remove()\n  //   }\n  // }\n  // const handleEvents = (events) => {\n  //   this.setState({\n  //     currentEvents: events\n  //   })\n  // }\n  // const renderEventContent = (eventInfo) => {\n  // return (\n  //   <>\n  //     <b>{eventInfo.timeText}</b>\n  //     <i>{eventInfo.event.title}</i>\n  //   </>\n  // )\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"Calendar\",\n    sx: {\n      width: '40vw'\n    },\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true // dateClick={handleDateClick}\n      // eventContent={renderEventContent}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calendar, \"ct3sefovqtGrqV1m93L5atx1M5E=\");\n\n_c = Calendar;\nexport default Calendar;\n/*\n\n\n         events: [\n            {\n              id: 'a',\n              groupId: ,\n              title: 'my event',\n              start: '2018-09-01',\n              end: '2018-09-01',\n              allDay: false,\n              editable: true,\n              display: 'auto'\n              daysOfWeek: []\n              startTime:\n              endTime:\n              startRecur:\n              endRecur:\n\n            }\n          ]\n\n\n\n  events: [\n    {\n      groupId: 'blueEvents', // recurrent events in this group move together\n      daysOfWeek: [ '4' ],\n      startTime: '10:45:00',\n      endTime: '12:45:00'\n    },\n    {\n      daysOfWeek: [ '3' ], // these recurrent events move separately\n      startTime: '11:00:00',\n      endTime: '11:30:00',\n      color: 'red'\n    }\n  ],\n  editable: true\n});\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/juanlee/Desktop/UCSC Coding/CSE115A/Medicine-Tracker/frontend/src/components/Calendar.js"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","Box","WorkspaceContext","Calendar","weekendsVisibleS","currentEventsS","useContext","weekendsVisible","currentEvents","width","left","center","right"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,qBAAzC;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AAEA,SAAQC,gBAAR,QAA+B,WAA/B;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAElB,QAAM;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA;AAAnB,MAAqCV,KAAK,CAACW,UAAN,CAAiBJ,gBAAjB,CAA3C;AACA,QAAM,CAACK,eAAD,IAAqBH,gBAA3B;AACA,QAAM,CAACI,aAAD,IAAmBH,cAAzB,CAJkB,CAMlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,EAAE,EAAE;AAACI,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,OAAO,EAAE,CAACX,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CADX;AAEE,MAAA,aAAa,EAAE;AACbU,QAAAA,IAAI,EAAE,iBADO;AAEbC,QAAAA,MAAM,EAAE,OAFK;AAGbC,QAAAA,KAAK,EAAE;AAHM,OAFjB;AAOE,MAAA,WAAW,EAAC,cAPd;AAQE,MAAA,QAAQ,EAAE,IARZ;AASE,MAAA,UAAU,EAAE,IATd;AAUE,MAAA,YAAY,EAAE,IAVhB;AAWE,MAAA,YAAY,EAAE,IAXhB,CAYA;AACA;;AAbA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA7EQT,Q;;KAAAA,Q;AA+ET,eAAeA,QAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport Box from '@mui/material/Box';\n\nimport {WorkspaceContext} from '../App.js';\n\nfunction Calendar() {\n\n  const {weekendsVisibleS, currentEventsS} = React.useContext(WorkspaceContext);\n  const [weekendsVisible,] = weekendsVisibleS;\n  const [currentEvents,] = currentEventsS;\n\n  // const [channelObj, setChannelObj] = React.useState({\n  //   id: '',\n  //   name: '',\n  //   events: [],\n  // });\n  // const [channelFeed, setChannelFeed] = React.useState([]);\n  // const [dmDrawerOpen, setdmDrawerOpen] = React.useState(false);\n  // const [dmObj, setDmObj] = React.useState({\n  //   id: '',\n  //   name: '',\n  //   events: [],\n  // });\n  // const [dmFeed, setDmFeed] = React.useState([]);\n\n  // const handleDateClick = (selectInfo) => {\n  // let title = prompt('Please enter a new title for your event')\n  // let calendarApi = selectInfo.view.calendar\n\n  // calendarApi.unselect() // clear date selection\n\n  // if (title) {\n  //   calendarApi.addEvent({\n  //     id: createEventId(),\n  //     title,\n  //     start: selectInfo.startStr,\n  //     end: selectInfo.endStr,\n  //     allDay: selectInfo.allDay\n  //   })\n  // }\n  // }\n\n  // const handleEventClick = (clickInfo) => {\n  //   if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n  //     clickInfo.event.remove()\n  //   }\n  // }\n\n  // const handleEvents = (events) => {\n  //   this.setState({\n  //     currentEvents: events\n  //   })\n  // }\n\n  // const renderEventContent = (eventInfo) => {\n  // return (\n  //   <>\n  //     <b>{eventInfo.timeText}</b>\n  //     <i>{eventInfo.event.title}</i>\n  //   </>\n  // )\n  // }\n\n  return (\n    <Box className='Calendar' sx={{width: '40vw'}}>\n      <FullCalendar\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        headerToolbar={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        }}\n        initialView='dayGridMonth'\n        editable={true}\n        selectable={true}\n        selectMirror={true}\n        dayMaxEvents={true}\n      // dateClick={handleDateClick}\n      // eventContent={renderEventContent}\n      />\n    </Box>\n  )\n}\n\nexport default Calendar;\n\n\n/*\n\n\n         events: [\n            {\n              id: 'a',\n              groupId: ,\n              title: 'my event',\n              start: '2018-09-01',\n              end: '2018-09-01',\n              allDay: false,\n              editable: true,\n              display: 'auto'\n              daysOfWeek: []\n              startTime:\n              endTime:\n              startRecur:\n              endRecur:\n\n            }\n          ]\n\n\n\n  events: [\n    {\n      groupId: 'blueEvents', // recurrent events in this group move together\n      daysOfWeek: [ '4' ],\n      startTime: '10:45:00',\n      endTime: '12:45:00'\n    },\n    {\n      daysOfWeek: [ '3' ], // these recurrent events move separately\n      startTime: '11:00:00',\n      endTime: '11:30:00',\n      color: 'red'\n    }\n  ],\n  editable: true\n});\n*/"]},"metadata":{},"sourceType":"module"}