{"ast":null,"code":"var _jsxFileName = \"/Users/juanlee/Desktop/UCSC Coding/CSE115A/Medicine-Tracker/frontend/src/components/DailyList.js\";\nimport * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DailyList() {\n  const meds = [{\n    'name': 'Advil',\n    'Description': 'painkillers',\n    'Frequency': 1,\n    'time': ['12:00 pm', '2:00 pm'],\n    'doses': '2mg',\n    'totalAmount': '44'\n  }, {\n    'name': 'Tylenol',\n    'Description': 'painkillers',\n    'Frequency': 2,\n    'time': ['1:15pm', '6:30pm'],\n    'doses': '4mg',\n    'totalAmount': '42'\n  }, {\n    'name': 'Codine',\n    'Description': 'painkillers',\n    'Frequency': 7,\n    'time': ['8:00am'],\n    'doses': '5mg',\n    'totalAmount': '1'\n  }, {\n    'name': 'Nyquil',\n    'Description': 'Sleepymeds',\n    'Frequency': 1,\n    'time': ['6:30am', '7:30pm'],\n    'doses': '6mg',\n    'totalAmount': '12'\n  }, {\n    'name': 'DayQuil',\n    'Description': 'Not so sleepy meds',\n    'Frequency': 1,\n    'time': ['12:00pm', '2:00pm', '5:00pm'],\n    'doses': '67mg',\n    'totalAmount': '434'\n  }];\n  const dow = ['sun', 'mon', 'tue', 'wed', 'thur', 'fri', 'sat'];\n  let today = new Date();\n  const display = [['today', today.getMonth() + '/' + today.getDate()]];\n\n  for (let i = 1; i < 30; i++) {\n    today.setDate(today.getDate() + 1);\n    display.push([dow[today.getDay()], today.getMonth() + '/' + today.getDate()]);\n  }\n\n  today = new Date();\n  let dailymed = new Array(30);\n\n  for (let i = 0; i < dailymed.length; i++) {\n    dailymed[i] = [];\n  }\n\n  for (let i = 0; i < meds.length; i++) {\n    for (let j = 0; j < 30; j = j + meds[i]['Frequency']) {\n      dailymed[j].push([meds[i]['name'] + '(' + meds[i]['doses'] + ')', meds[i]['time']]);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"left\",\n          variant: \"h5\",\n          children: \"Medication\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          align: \"right\",\n          variant: \"h5\",\n          children: \"Doses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      sx: {\n        width: '100%',\n        maxWidth: '100vw',\n        bgcolor: 'background.paper',\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: '100vw',\n        '& ul': {\n          padding: 0\n        }\n      },\n      subheader: /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 28\n      }, this),\n      children: display.map((sectionId, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(ListSubheader, {\n            children: `${sectionId[0]} ${sectionId[1]}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), dailymed[index].map(item => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: `${item[0]}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 1,\n              direction: \"row\",\n              sx: {\n                float: 'right'\n              },\n              children: item[1].map(value => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  children: value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)]\n          }, `item-${sectionId}-${item}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, `section-${sectionId}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_c = DailyList;\nexport default DailyList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DailyList\");","map":{"version":3,"sources":["/Users/juanlee/Desktop/UCSC Coding/CSE115A/Medicine-Tracker/frontend/src/components/DailyList.js"],"names":["React","Typography","Grid","List","ListItem","ListItemText","ListSubheader","Stack","Button","DailyList","meds","dow","today","Date","display","getMonth","getDate","i","setDate","push","getDay","dailymed","Array","length","j","width","maxWidth","bgcolor","position","overflow","maxHeight","padding","map","sectionId","index","item","float","value"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,SAASC,SAAT,GAAqB;AACjB,QAAMC,IAAI,GAAG,CACT;AAAC,YAAQ,OAAT;AAAkB,mBAAe,aAAjC;AAAgD,iBAAa,CAA7D;AAAgE,YAAQ,CAAC,UAAD,EAAa,SAAb,CAAxE;AAAiG,aAAS,KAA1G;AAAiH,mBAAe;AAAhI,GADS,EAET;AAAC,YAAQ,SAAT;AAAoB,mBAAe,aAAnC;AAAkD,iBAAa,CAA/D;AAAkE,YAAQ,CAAC,QAAD,EAAW,QAAX,CAA1E;AAAgG,aAAS,KAAzG;AAAgH,mBAAe;AAA/H,GAFS,EAGT;AAAC,YAAQ,QAAT;AAAmB,mBAAe,aAAlC;AAAiD,iBAAa,CAA9D;AAAiE,YAAQ,CAAC,QAAD,CAAzE;AAAqF,aAAS,KAA9F;AAAqG,mBAAe;AAApH,GAHS,EAIT;AAAC,YAAQ,QAAT;AAAmB,mBAAe,YAAlC;AAAgD,iBAAa,CAA7D;AAAgE,YAAQ,CAAC,QAAD,EAAW,QAAX,CAAxE;AAA8F,aAAS,KAAvG;AAA8G,mBAAe;AAA7H,GAJS,EAKT;AAAC,YAAQ,SAAT;AAAoB,mBAAe,oBAAnC;AAAyD,iBAAa,CAAtE;AAAyE,YAAQ,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,CAAjF;AAAkH,aAAS,MAA3H;AAAmI,mBAAe;AAAlJ,GALS,CAAb;AAOE,QAAMC,GAAG,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,KAA5C,CAAZ;AACA,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAMC,OAAO,GAAG,CAAC,CAAC,OAAD,EAAUF,KAAK,CAACG,QAAN,KAAmB,GAAnB,GAAwBH,KAAK,CAACI,OAAN,EAAlC,CAAD,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BL,IAAAA,KAAK,CAACM,OAAN,CAAcN,KAAK,CAACI,OAAN,KAAkB,CAAhC;AACAF,IAAAA,OAAO,CAACK,IAAR,CAAa,CAACR,GAAG,CAACC,KAAK,CAACQ,MAAN,EAAD,CAAJ,EAAsBR,KAAK,CAACG,QAAN,KAAmB,GAAnB,GAAwBH,KAAK,CAACI,OAAN,EAA9C,CAAb;AACD;;AACDJ,EAAAA,KAAK,GAAG,IAAIC,IAAJ,EAAR;AACA,MAAIQ,QAAQ,GAAG,IAAIC,KAAJ,CAAU,EAAV,CAAf;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,QAAQ,CAACE,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACxCI,IAAAA,QAAQ,CAACJ,CAAD,CAAR,GAAc,EAAd;AACD;;AACD,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACa,MAAzB,EAAiCN,CAAC,EAAlC,EAAsC;AACpC,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,GAAEA,CAAC,GAAGd,IAAI,CAACO,CAAD,CAAJ,CAAQ,WAAR,CAA/B,EAAoD;AAClDI,MAAAA,QAAQ,CAACG,CAAD,CAAR,CAAYL,IAAZ,CAAiB,CAACT,IAAI,CAACO,CAAD,CAAJ,CAAQ,MAAR,IAAkB,GAAlB,GAAwBP,IAAI,CAACO,CAAD,CAAJ,CAAQ,OAAR,CAAxB,GAA2C,GAA5C,EAAiDP,IAAI,CAACO,CAAD,CAAJ,CAAQ,MAAR,CAAjD,CAAjB;AACD;AACF;;AACH,sBACI;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,MAAlB;AAAyB,UAAA,OAAO,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,KAAK,EAAC,OAAlB;AAA0B,UAAA,OAAO,EAAC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eASI,QAAC,IAAD;AACI,MAAA,EAAE,EAAE;AACAQ,QAAAA,KAAK,EAAE,MADP;AAEAC,QAAAA,QAAQ,EAAE,OAFV;AAGAC,QAAAA,OAAO,EAAE,kBAHT;AAIAC,QAAAA,QAAQ,EAAE,UAJV;AAKAC,QAAAA,QAAQ,EAAE,MALV;AAMAC,QAAAA,SAAS,EAAE,OANX;AAOA,gBAAQ;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAPR,OADR;AAUI,MAAA,SAAS,eAAE;AAAA;AAAA;AAAA;AAAA,cAVf;AAAA,gBAYKjB,OAAO,CAACkB,GAAR,CAAY,CAACC,SAAD,EAAYC,KAAZ,kBACT;AAAA,+BACA;AAAA,kCACI,QAAC,aAAD;AAAA,sBAAiB,GAAED,SAAS,CAAC,CAAD,CAAI,IAAGA,SAAS,CAAC,CAAD,CAAI;AAAhD;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKZ,QAAQ,CAACa,KAAD,CAAR,CAAgBF,GAAhB,CAAqBG,IAAD,iBACrB,QAAC,QAAD;AAAA,oCACI,QAAC,YAAD;AAAc,cAAA,OAAO,EAAG,GAAEA,IAAI,CAAC,CAAD,CAAI;AAAlC;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,KAAD;AAAO,cAAA,OAAO,EAAE,CAAhB;AAAmB,cAAA,SAAS,EAAC,KAA7B;AAAmC,cAAA,EAAE,EAAE;AAACC,gBAAAA,KAAK,EAAE;AAAR,eAAvC;AAAA,wBACCD,IAAI,CAAC,CAAD,CAAJ,CAAQH,GAAR,CAAaK,KAAD,iBACT;AAAA,uCACI,QAAC,MAAD;AAAA,4BAASA;AAAT;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,sBADH;AADD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA,aAAgB,QAAOJ,SAAU,IAAGE,IAAK,EAAzC;AAAA;AAAA;AAAA;AAAA,kBADC,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,SAAU,WAAUF,SAAU,EAA9B;AAAA;AAAA;AAAA;AAAA,cADH;AAZL;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4CH;;KArEQxB,S;AAuET,eAAeA,SAAf","sourcesContent":["import * as React from 'react'\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Stack from '@mui/material/Stack';\nimport Button from '@mui/material/Button';\n\nfunction DailyList() {\n    const meds = [\n        {'name': 'Advil', 'Description': 'painkillers', 'Frequency': 1, 'time': ['12:00 pm', '2:00 pm'], 'doses': '2mg', 'totalAmount': '44'},\n        {'name': 'Tylenol', 'Description': 'painkillers', 'Frequency': 2, 'time': ['1:15pm', '6:30pm'], 'doses': '4mg', 'totalAmount': '42'},\n        {'name': 'Codine', 'Description': 'painkillers', 'Frequency': 7, 'time': ['8:00am'], 'doses': '5mg', 'totalAmount': '1'},\n        {'name': 'Nyquil', 'Description': 'Sleepymeds', 'Frequency': 1, 'time': ['6:30am', '7:30pm'], 'doses': '6mg', 'totalAmount': '12'},\n        {'name': 'DayQuil', 'Description': 'Not so sleepy meds', 'Frequency': 1, 'time': ['12:00pm', '2:00pm', '5:00pm'], 'doses': '67mg', 'totalAmount': '434'},\n        ];\n      const dow = ['sun', 'mon', 'tue', 'wed', 'thur', 'fri', 'sat'];\n      let today = new Date()\n      const display = [['today', today.getMonth() + '/' +today.getDate()]];\n      for (let i = 1; i < 30; i++) {\n        today.setDate(today.getDate() + 1);\n        display.push([dow[today.getDay()], today.getMonth() + '/' +today.getDate()]);\n      }\n      today = new Date();\n      let dailymed = new Array(30);\n      for (let i = 0; i < dailymed.length; i++) {\n        dailymed[i] = [];\n      }\n      for (let i = 0; i < meds.length; i++) {\n        for (let j = 0; j < 30; j= j + meds[i]['Frequency']){\n          dailymed[j].push([meds[i]['name'] + '(' + meds[i]['doses'] + ')', meds[i]['time']])\n        }\n      }\n    return(\n        <div>\n            <Grid container>\n                <Grid item xs={6}>\n                    <Typography align=\"left\" variant=\"h5\">Medication</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                    <Typography align=\"right\" variant=\"h5\">Doses</Typography>\n                </Grid>\n            </Grid>\n            <List\n                sx={{\n                    width: '100%',\n                    maxWidth: '100vw',\n                    bgcolor: 'background.paper',\n                    position: 'relative',\n                    overflow: 'auto',\n                    maxHeight: '100vw',\n                    '& ul': { padding: 0 },\n                }}\n                subheader={<li />}\n                >\n                {display.map((sectionId, index) => (\n                    <li key={`section-${sectionId}`}>\n                    <ul>\n                        <ListSubheader>{`${sectionId[0]} ${sectionId[1]}`}</ListSubheader>\n                        {dailymed[index].map((item) => (\n                        <ListItem key={`item-${sectionId}-${item}`}>\n                            <ListItemText primary={`${item[0]}`} />\n                            <Stack spacing={1} direction=\"row\" sx={{float: 'right'}}>\n                            {item[1].map((value) => (\n                                <div>\n                                    <Button>{value}</Button>\n                                </div>\n                            ))}\n                            </Stack>\n                        </ListItem>\n                        ))}\n                    </ul>\n                    </li>\n                ))}\n            </List>\n        </div>\n    );\n}\n\nexport default DailyList;"]},"metadata":{},"sourceType":"module"}